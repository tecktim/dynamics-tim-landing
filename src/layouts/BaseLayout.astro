---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import SeoHead from '../components/SeoHead.astro';
import '../styles/global.css';

interface Props {
  title?: string;
  description?: string;
  ogImage?: string;
  url?: string;
  showHeader?: boolean;
  showFooter?: boolean;
}

const {
  title,
  description,
  ogImage,
  url,
  showHeader = true,
  showFooter = true
} = Astro.props as Props;
const base = import.meta.env.BASE_URL ?? '/';
const csp = [
  "default-src 'self'",
  "script-src 'self'",
  "style-src 'self' 'unsafe-inline'",
  "img-src 'self' data:",
  "font-src 'self'",
  "connect-src 'self'",
  "frame-src 'self'",
  "base-uri 'self'",
  "form-action 'self'"
].join('; ');
---

<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta http-equiv="Content-Security-Policy" content={csp} />
    <meta name="referrer" content="strict-origin-when-cross-origin" />
    <SeoHead title={title} description={description} ogImage={ogImage} url={url} />
    <link rel="icon" type="image/svg+xml" href={`${base}favicon.svg`} />
    <link rel="manifest" href={`${base}manifest.webmanifest`} />
    <link rel="preload" href={`${base}assets/fonts/inter-latin.woff2`} as="font" type="font/woff2" crossorigin />
    <link rel="preload" href={`${base}assets/fonts/sora-latin.woff2`} as="font" type="font/woff2" crossorigin />
    <link rel="stylesheet" href={`${base}assets/css/consent.css`} />
  </head>
  <body class="min-h-screen bg-slate-50">
    {showHeader && <Header />}
    <main>
      <slot />
    </main>
    {showFooter && <Footer />}
    <script type="module">
      const assetBase = ${JSON.stringify(base)};
      const scriptCache = new Map();

      const loadScript = (key, src) => {
        if (scriptCache.has(key)) {
          return scriptCache.get(key);
        }

        const existing = document.querySelector(`script[data-inline-loader="${key}"]`);
        if (existing) {
          const existingPromise = existing.dataset.loaded === 'true'
            ? Promise.resolve()
            : new Promise((resolve, reject) => {
                existing.addEventListener('load', resolve, { once: true });
                existing.addEventListener('error', reject, { once: true });
              });
          scriptCache.set(key, existingPromise);
          return existingPromise;
        }

        const promise = new Promise((resolve, reject) => {
          const script = document.createElement('script');
          script.src = src;
          script.defer = true;
          script.dataset.inlineLoader = key;
          script.addEventListener(
            'load',
            () => {
              script.dataset.loaded = 'true';
              resolve();
            },
            { once: true }
          );
          script.addEventListener('error', reject, { once: true });
          document.head.appendChild(script);
        });

        scriptCache.set(key, promise);
        return promise;
      };

      const schedule = (callback) => {
        const run = () => {
          try {
            callback();
          } catch (error) {
            console.error('[lazy-loader] callback failed', error);
          }
        };

        if ('requestIdleCallback' in window) {
          requestIdleCallback(run, { timeout: 1500 });
        } else if (document.readyState === 'complete') {
          setTimeout(run, 200);
        } else {
          window.addEventListener('load', run, { once: true });
        }
      };

      const hasRevealTargets = () => document.querySelector('[data-reveal]');
      const hasConsentTargets = () =>
        document.querySelector('[data-consent],[data-consent-manage],[data-consent-placeholder]');

      schedule(() => {
        if (hasRevealTargets()) {
          loadScript('reveal', `${assetBase}assets/js/reveal.js`).catch((error) => {
            console.error('[reveal] failed to load', error);
          });
        }
      });

      const ensureConsent = (force = false) => {
        if (window.__consentReady) {
          return Promise.resolve();
        }

        if (!force && !hasConsentTargets()) {
          return Promise.resolve();
        }

        return loadScript('consent', `${assetBase}assets/js/consent.js`).catch((error) => {
          console.error('[consent] failed to load', error);
          throw error;
        });
      };

      schedule(() => {
        ensureConsent(false).catch(() => {
          /* handled above */
        });
      });

      const manageSelector = '[data-consent-manage]';

      document.addEventListener(
        'pointerdown',
        (event) => {
          const trigger = event.target instanceof Element ? event.target.closest(manageSelector) : null;
          if (!trigger) {
            return;
          }

          ensureConsent(true).catch(() => {
            /* handled */
          });
        },
        { passive: true }
      );

      let consentTriggering = false;

      document.addEventListener(
        'click',
        (event) => {
          const trigger = event.target instanceof Element ? event.target.closest(manageSelector) : null;

          if (!trigger || window.__consentReady || consentTriggering) {
            return;
          }

          event.preventDefault();

          ensureConsent(true)
            .then(() => {
              consentTriggering = true;
              requestAnimationFrame(() => {
                trigger.dispatchEvent(
                  new MouseEvent('click', {
                    bubbles: true,
                    cancelable: true
                  })
                );
                setTimeout(() => {
                  consentTriggering = false;
                }, 0);
              });
            })
            .catch(() => {
              consentTriggering = false;
            });
        },
        true
      );
    </script>
  </body>
</html>

